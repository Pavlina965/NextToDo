generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Task {
  id                 Int               @id @default(autoincrement())
  title              String            @db.VarChar(255)
  description        String?           @db.VarChar(1000)
  done               Boolean           @default(false)
  dueDate            DateTime?         @db.Timestamptz(6)
  completion_date    DateTime?
  status             String?
  priority           Int?
  predicted_duration Int?
  actual_duration    Int?
  pomodoro_cycles    Int?
  progress           Int?              @default(0)
  projectId          Int?
  userId             Int
  predictions        AI_Prediction[]
  Reccuring_task     Reccuring_task?
  Reminder           Reminder[]
  project            Project?          @relation(fields: [projectId], references: [id])
  attachments        Task_Attachment[]
  comments           Task_Comment[]
  dependents         Task_Dependency[] @relation("TaskDependents")
  dependencies       Task_Dependency[] @relation("TaskDependency")
  histories          Task_History[]
  state              Task_State[]
  tags               Task_Tag[]
  TimeLog            TimeLog[]
  userTasks          User_Task[]
}

model Reccuring_task {
  id       Int      @id @default(autoincrement())
  taskId   Int      @unique
  interval String
  nextRun  DateTime
  task     Task     @relation(fields: [taskId], references: [id])
}

model Project {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  description   String
  creation_date DateTime
  tasks         Task[]
  users         User_Project[]
}

model User {
  id       Int            @id @default(autoincrement())
  email    String         @unique
  name     String?        @db.VarChar(255)
  password String
  comments Task_Comment[]
  TimeLog  TimeLog[]
  projects User_Project[]
  tasks    User_Task[]
}

model Tag {
  id     Int        @id @default(autoincrement())
  name   String     @unique @db.VarChar(255)
  colour String
  tasks  Task_Tag[]
}

model Task_Tag {
  task_id Int
  tag_id  Int
  tag     Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  task    Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@id([task_id, tag_id])
}

model User_Project {
  user_id     Int
  project_id  Int
  role_id     Int
  permissions String
  project     Project @relation(fields: [project_id], references: [id])
  role        Role    @relation(fields: [role_id], references: [id])
  user        User    @relation(fields: [user_id], references: [id])

  @@id([user_id, project_id])
}

model Role {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  users       User_Project[]
}

model Task_Dependency {
  task_id           Int
  dependent_task_id Int
  dependentTask     Task @relation("TaskDependents", fields: [dependent_task_id], references: [id])
  task              Task @relation("TaskDependency", fields: [task_id], references: [id])

  @@id([task_id, dependent_task_id])
}

model TimeLog {
  id        Int      @id @default(autoincrement())
  taskId    Int
  userId    Int
  startTime DateTime
  endTime   DateTime
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Reminder {
  id       Int      @id @default(autoincrement())
  taskId   Int
  remindAt DateTime
  method   String
  task     Task     @relation(fields: [taskId], references: [id])
}

model Task_Comment {
  id      Int      @id @default(autoincrement())
  text    String
  date    DateTime
  user_id Int
  task_id Int
  task    Task     @relation(fields: [task_id], references: [id])
  user    User     @relation(fields: [user_id], references: [id])
}

model Task_Attachment {
  id       Int    @id @default(autoincrement())
  filename String
  path     String
  task_id  Int
  task     Task   @relation(fields: [task_id], references: [id])
}

model User_Task {
  user_id        Int
  task_id        Int
  responsibility String
  start_time     DateTime
  task           Task     @relation(fields: [task_id], references: [id])
  user           User     @relation(fields: [user_id], references: [id])

  @@id([user_id, task_id])
}

model Task_History {
  id          Int      @id @default(autoincrement())
  task_id     Int
  action      String
  date        DateTime
  description String
  task        Task     @relation(fields: [task_id], references: [id])
}

model AI_Prediction {
  id             Int      @id @default(autoincrement())
  predicted_task Json
  task_id        Int
  recommendation String
  date           DateTime
  task           Task     @relation(fields: [task_id], references: [id])
}

model Task_State {
  id          Int      @id @default(autoincrement())
  task_id     Int
  state_from  String
  state_to    String
  change_date DateTime
  task        Task     @relation(fields: [task_id], references: [id])
}
